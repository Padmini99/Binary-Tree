// Online C++ compiler to run C++ program online
#include <bits/stdc++.h>
using namespace std;
class heap{
    public:
    int arr[100];
    int size;
    heap(){
        arr[0]=-1;
        size=0;
    }
    //insertion
    void insert(int val){
        size=size+1;
        int index=size;
        arr[index]=val;
        while(index>1){
            int parent=index/2;
            if(arr[index]>arr[parent]){
                swap(arr[parent],arr[index]);
                index=parent;
            }
            else{
                return;
            }
        }
    }
    //deletion
     void deleteFromHeap(){
        if(size==0){
            cout<<"nothing to delete ";
            return;
        }

     //step 1: put last element into first index
        arr[1]=arr[size];
     //2nd step: remove 
        size--;
    //3rd step : take root node to its correct position
        int i=1;
        while(i<size){
            int leftInd=2*i;
            int rightInd=2*i+1;
            if(leftInd<=size && arr[i]<arr[leftInd] && arr[leftInd]>arr[rightInd]){
                swap(arr[i], arr[leftInd]);
                i=leftInd;
            }
            else if(rightInd<=size && arr[i]<arr[rightInd] && arr[rightInd]>arr[leftInd]){
                swap(arr[i], arr[rightInd]);
                i=rightInd;
            }
            else{
                return;
          }
    }
}
    void print(){
        for(int i=1;i<=size;i++){
            cout<<arr[i]<<" ";
        }cout<<endl;
    }
};
//heapify algorithm 
void maxheapify(int arr[],int n,int i){
    int largest = i;
    int left = 2 * i ;
    int right = 2 * i + 1;
    //when we write 0 based index then we should write left/right<n and left = 2*i+1, right = 2*i+2 for both max and min heapify 
    if (left <= n && arr[left] > arr[largest]) {
        largest = left;
    }
    if (right <= n && arr[right] > arr[largest]) {
        largest = right;
    }
    if (largest != i) {
        swap(arr[i], arr[largest]); 
        maxheapify(arr, n, largest);
    }
}
void minheapify(int arr[],int n,int i){
    int smallest=i;
    int left=2*i ;
    int right=2*i + 1;
    if(left<=n && arr[smallest]>arr[left]){
        smallest=left;
    }
    if(right<=n && arr[smallest]>arr[right]){
        smallest=right;
    }
    if(smallest!=i){
        swap(arr[smallest],arr[i]);
        minheapify(arr,n,smallest);
    }
}
// heap sort 
void heapsort(int arr[],int n){
    //no need to write this for loop, when we only write one heapify that is either maxheapify or minheapify 
    for (int i = n / 2; i >= 1; i--) {
        maxheapify(arr, n, i);
    }
    int size=n;
    while(size>1){
        //swap
        swap(arr[size],arr[1]);
        //remove
        size--;
        //heapify(place in crct position)
        maxheapify(arr,size,1);
    }
}
int main() {
    heap h;
    h.insert(50);
    h.insert(55);
    h.insert(53);
    h.insert(54);
    h.insert(52);
    cout<<"Insertion : "<<" ";
    h.print();
    cout<<"deletion : "<<" ";
    h.deletefromheap();
    h.print();
    //for 0 based index no need -1
    int arr[6] = {-1, 54, 53, 55, 52, 50}; 
    int n = 5;
    //for 0 based index - for(int i = n / 2 -1; i > 0; i--)
    for (int i = n / 2 ; i > 0; i--) { 
        maxheapify(arr, n, i);
    }
    cout << "Print maximum heapified array: ";
    //for 0 based index for(int i = 0;i<n;i++)
    for (int i = 1; i <= n; i++) { 
        cout << arr[i] << " ";
    }
    cout << endl;
    for(int i=n/2;i>0;i--){
        minheapify(arr,n,i);
    }
    cout<<"print minimum heapify array : ";
    for(int i=1;i<=n;i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    heapsort(arr,n);
    cout<<"print heap sort array : ";
    for(int i=1;i<=n;i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    return 0;
}
