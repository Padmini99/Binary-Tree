#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;
    Node(int data) {
        this->data = data;
        this->left = NULL;
        this->right = NULL;
    }
};

void buildTree(Node* &root) {
    int data;
    cin >> data;
    if(data == -1) {
        return;
    }
    root = new Node(data);
    cout << "Enter data for left child of " << data << endl;
    buildTree(root->left);
    cout << "Enter data for right child of " << data << endl;
    buildTree(root->right);
}
void preorder(Node* root) {
    if(root == NULL) {
        return;
    }
    cout << root->data << " ";
    preorder(root->left);
    preorder(root->right);
}
void inorder(Node* root) {
    if(root == NULL) {
        return;
    }
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}
void postorder(Node* root) {
    if(root == NULL) {
        return;
    }
    postorder(root->left);
    postorder(root->right);
    cout << root->data << " ";
}
int main() {
    Node* root = NULL;
    cout<<"enter data for root node:";
    buildTree(root);
    //1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1 
    cout << "preorder traversal is : ";
    preorder(root);
    cout<<endl;
    cout << "inorder traversal is : ";
    inorder(root);
    cout<<endl;
    cout << "postorder traversal is : ";
    postorder(root);
    return 0;
}



// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.Scanner;
class Node {
    int data;
    Node left, right;

    Node(int data) {
        this.data = data;
        left = right = null;
    }
}

public class HelloWorld {
    static Scanner scanner = new Scanner(System.in);
    private static Node buildTree(Node root) {
        int data = scanner.nextInt();
        if(data == -1) {
            return null;
        }
        root = new Node(data);
        System.out.println("Enter data for left child of " + data);
        root.left = buildTree(root.left);
        System.out.println("Enter data for right child of " + data);
        root.right = buildTree(root.right);
        return root;
    }
    private static void preorder(Node root) {
    if(root == null) {
        return;
    }
    System.out.print(root.data + " ");
    preorder(root.left);
    preorder(root.right);
}
    private static void inorder(Node root) {
    if(root == null) {
        return;
    }
    inorder(root.left);
    System.out.print(root.data + " ");
    inorder(root.right);
}
    private static void postorder(Node root) {
    if(root == null) {
        return;
    }
    postorder(root.left);
    postorder(root.right);
    System.out.print(root.data + " ");
}
    public static void main(String[] args) {
        Node root = null;
        System.out.print("Enter data for root node:");
        root = buildTree(root);
        //1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1
        System.out.print("pre-order traversal is : ");
        preorder(root);
        System.out.println();
        System.out.print("Inorder traversal is : ");
        inorder(root);
        System.out.println();
        System.out.print("post-order traversal is : ");
        postorder(root);
    }
}
