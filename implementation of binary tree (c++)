// Online C++ compiler to run C++ program online
#include<bits/stdc++.h>
using namespace std;
class Node {
public:
    int data;
    Node* left;
    Node* right;
    Node(int data) {
        this->data = data;
        this->left = NULL;
        this->right = NULL;
    }
};
void buildTree(Node* &root) {
    int data;
    cin >> data;
    if(data == -1) {
        return;
    }
    root = new Node(data);
    cout << "Enter data for left child of " << data << endl;
    buildTree(root->left);
    cout << "Enter data for right child of " << data << endl;
    buildTree(root->right);
}
void levelOrder(Node* root){
    queue<Node*>q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        Node* temp=q.front();
        q.pop();
        if(temp==NULL){
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
            cout<<temp->data<<" ";
            if(temp->left){
                q.push(temp->left);
            }
            if(temp->right){
                q.push(temp->right);
            }
        }
    }
}
void itepreorder(Node* root){
    if(root == NULL){
        return;
    }
    stack<Node*>s;
    s.push(root);
    while(!s.empty()){
        Node* temp=s.top();
        s.pop();
        cout<<temp->data<<" ";
        if(temp->right){
            s.push(temp->right);
        }
        if(temp->left){
            s.push(temp->left);
        }
    }
}
void iteinorder(Node* root){
    stack<Node*>s;
    Node* temp=root;
    while(temp!=NULL || !s.empty()){
        while(temp!=NULL){
            s.push(temp);
            temp=temp->left;
        }
        temp=s.top();
        s.pop();
        cout<<temp->data<<" ";
        temp=temp->right;
    }
}
void itepostorder1(Node* root){
    if(root == NULL){
        return;
    }
    stack<Node*>s;
    Node* curr=root;
    while(curr!=NULL || !s.empty()){
        if(curr!=NULL){
            s.push(curr);
            curr=curr->left;
        }
        else{
        Node* temp=s.top()->right;
            if(temp==NULL){
                temp=s.top();
                s.pop();
                cout<<temp->data<<" ";
                while(!s.empty() && temp == s.top()->right){
                    temp=s.top();
                    s.pop();
                    cout<<temp->data<<" ";
                }
            }
            else{
                curr=temp;
            }
        }
    }
}
void itepostorder2(Node* root){
    if(root==NULL){
        return;
    }
    stack<Node*>s1;
    stack<Node*>s2;
    s1.push(root);
    while(!s1.empty()){
        Node* temp=s1.top();
        s1.pop();
        s2.push(temp);
        if(temp->left){
            s1.push(temp->left);
        }
        if(temp->right){
            s1.push(temp->right);
        }
    }
    while(!s2.empty()){
        Node* temp=s2.top();
        s2.pop();
        cout<<temp->data<<" ";
    }
}
void preorder(Node* root) {
    if(root == NULL) {
        return;
    }
    cout << root->data << " ";
    preorder(root->left);
    preorder(root->right);
}
void inorder(Node* root) {
    if(root == NULL) {
        return;
    }
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}
void postorder(Node* root) {
    if(root == NULL) {
        return;
    }
    postorder(root->left);
    postorder(root->right);
    cout << root->data << " ";
}
int main() {
    Node* root = NULL;
    cout<<"enter data for root node: ";
    //1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1 
    buildTree(root);
    cout<<"level order traversal: "<<endl;
    levelOrder(root);
    cout<<"iterative preorder traversal: ";
    itepreorder(root);
    cout<<endl;
    cout << "preorder traversal : ";
    preorder(root);
    cout<<endl;
    cout<<"iterative inorder traversal: ";
    iteinorder(root);
    cout<<endl;
    cout << "inorder traversal : ";
    inorder(root);
    cout<<endl;
    cout << "iterative postorder traversal using 1 stacks : ";
    itepostorder1(root);
    cout<<endl;
    cout << "iterative postorder traversal using 2 stacks : ";
    itepostorder2(root);
    cout<<endl;
    cout << "postorder traversal : ";
    postorder(root);
    cout<<endl;
    return 0;
}
