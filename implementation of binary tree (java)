// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.Scanner;
import java.util.*;
class Node {
    int data;
    Node left;
    Node right;
    Node(int data) {
        this.data = data;
        this.left= null;
        this.right=null;
    }
}
public class HelloWorld {
    static Scanner s=new Scanner(System.in);
    private static Node buildTree(Node root){
        int data=s.nextInt();
        if(data==-1){
            return null;
        }
        root=new Node(data);
        System.out.println("Enter data for left child of " + data);
        root.left = buildTree(root.left);
        System.out.println("Enter data for right child of " + data);
        root.right = buildTree(root.right);
        return root;
    }
    private static void levelOrder(Node root){
    Queue<Node> q = new LinkedList<>();
    q.add(root);
    q.add(null);
    while(!q.isEmpty()){
        Node temp=q.peek();
        q.poll();
        if(temp==null){
            System.out.println();
            if(!q.isEmpty()){
                q.add(null);
            }
        }
        else{
            System.out.print(temp.data+" ");
            if(temp.left!=null){
                q.add(temp.left);
            }
            if(temp.right!=null){
                q.add(temp.right);
            }
        }
    }
}
    private static void itepreorder(Node root){
    if(root == null){
        return;
    }
    Stack<Node> s = new Stack<>();
    s.push(root);
    while(!s.isEmpty()){
        Node temp = s.peek();
        s.pop();
        System.out.print(temp.data + " ");
        if(temp.right != null){
            s.push(temp.right);
        }
        if(temp.left != null){
            s.push(temp.left);
        }
    }
}
    private static void iteinorder(Node root){
    Stack<Node> s = new Stack<>();
    Node temp = root;
    while(temp != null || !s.isEmpty()){
        while(temp != null){
            s.push(temp);
            temp = temp.left;
        }
        temp = s.pop();
        System.out.print(temp.data + " ");
        temp = temp.right;
    }
}
    private static void itepostorder1(Node root){
    if(root == null){
        return;
    }
    Stack<Node> s = new Stack<>();
    Node curr = root;
    while(curr != null || !s.isEmpty()){
        if(curr != null){
            s.push(curr);
            curr = curr.left;
        }
        else{
            Node temp = s.peek().right;
            if(temp == null){
                temp = s.peek();
                s.pop();
                System.out.print(temp.data + " ");
                while(!s.isEmpty() && temp == s.peek().right){
                    temp = s.peek();
                    s.pop();
                    System.out.print(temp.data + " ");
                }
            }
            else{
                curr = temp;
            }
        }
    }
}

   private static void itepostorder2(Node root){
    if(root==null){
        return;
    }
    Stack<Node>s1 = new Stack<>();
    Stack<Node>s2 = new Stack<>();
    s1.push(root);
    while(!s1.isEmpty()){
        Node temp=s1.peek();
        s1.pop();
        s2.push(temp);
        if(temp.left!=null){
            s1.push(temp.left);
        }
        if(temp.right!=null){
            s1.push(temp.right);
        }
    }
    while(!s2.isEmpty()){
        Node temp=s2.peek();
        s2.pop();
        System.out.print(temp.data+" ");
    }
}
    private static void preorder(Node root){
        if(root == null){
            return;
        }
        System.out.print(root.data+" ");
        preorder(root.left);
        preorder(root.right);
    }
    private static void inorder(Node root){
        if(root == null){
            return;
        }
        inorder(root.left);
        System.out.print(root.data+" ");
        inorder(root.right);
    }
    private static void postorder(Node root){
        if(root == null){
            return;
        }
        postorder(root.left);
        postorder(root.right);
        System.out.print(root.data+" ");
    }
    public static void main(String[] args) {
        Node root =null;
        System.out.print("enter data: ");
        //1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1
        root=buildTree(root);
        System.out.println("level order traversal: ");
        levelOrder(root);
        System.out.print("iterative preorder traversal: ");
        itepreorder(root);
        System.out.println();
        System.out.print("preorder traversal: ");
        preorder(root);
        System.out.println();
        System.out.print("iterative inorder traversal: ");
        iteinorder(root);
        System.out.println();
        System.out.print("inorder traversal: ");
        inorder(root);
        System.out.println();
        System.out.print("iterative post-order traversal using 1 stacks : ");
        itepostorder1(root);
        System.out.println();
        System.out.print("iterative post-order traversal using 2 stacks : ");
        itepostorder2(root);
        System.out.println();
        System.out.print("post-order traversal: ");
        postorder(root);
        
    }
}
