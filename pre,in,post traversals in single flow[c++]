// Online C++ compiler to run C++ program online
#include<bits/stdc++.h>
using namespace std;
class Node {
public:
    int data;
    Node* left;
    Node* right;
    Node(int data) {
        this->data = data;
        this->left = NULL;
        this->right = NULL;
    }
};
void buildTree(Node* &root) {
    int data;
    cin >> data;
    if(data == -1) {
        return;
    }
    root = new Node(data);
    cout << "Enter data for left child of " << data << endl;
    buildTree(root->left);
    cout << "Enter data for right child of " << data << endl;
    buildTree(root->right);
}
void alltraversals(Node* root){
    if(root == NULL){
        return;
    }
    stack<Pair> s=new Stack<>();
    vector<int> pre,in,post;
    s.push(new Pair(root, 1));
    while(!s.isEmpty()){
        //auto temp=s.top();
        Pair temp = s.top();
        s.pop();
        if(temp.second == 1){
            pre.push_back(temp.first->data);
            //cout << "\nPreorder: " << temp.first->data << " ";
            temp.second++;
            s.push(temp);
            if(temp.first->left != NULL){
                s.push({temp.first->left, 1});
            }
        }
        else if(temp.second == 2){
            in.push_back(temp.first->data);
            //cout << "\nInorder: " << temp.first->data << " ";
            temp.second++;
            s.push(temp);
            if(temp.first->right != NULL){
                s.push({temp.first->right, 1});
            }
        }
        else{
            post.push_back(temp.first->data);
            //cout << "\nPostorder: " << temp.first->data << " ";
        }
    }
    cout << "Preorder: ";
    for(int i : pre) {
        cout << i << " ";
    }
    cout << endl;
    cout << "Inorder: ";
    for(int i : in) {
        cout << i << " ";
    }
    cout << endl;
    cout << "Postorder: ";
    for(int i : post) {
        cout << i << " ";
    }
    cout << endl;
}
int main() {
    Node* root = NULL;
    cout<<"enter data for root node: ";
    //1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1 
    buildTree(root);
    /*Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    root->right->left = new Node(6);
    root->right->right = new Node(7);*/
    cout << "pre/in/post order traversals:"<<endl;
    alltraversals(root);
    return 0;
}
